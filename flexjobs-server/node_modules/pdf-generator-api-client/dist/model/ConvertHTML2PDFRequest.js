"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ConvertHTML2PDFRequest model module.
 * @module model/ConvertHTML2PDFRequest
 * @version 4.0.3
 */
var ConvertHTML2PDFRequest = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ConvertHTML2PDFRequest</code>.
   * @alias module:model/ConvertHTML2PDFRequest
   */
  function ConvertHTML2PDFRequest() {
    _classCallCheck(this, ConvertHTML2PDFRequest);

    ConvertHTML2PDFRequest.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ConvertHTML2PDFRequest, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>ConvertHTML2PDFRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConvertHTML2PDFRequest} obj Optional instance to populate.
     * @return {module:model/ConvertHTML2PDFRequest} The populated <code>ConvertHTML2PDFRequest</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ConvertHTML2PDFRequest();

        if (data.hasOwnProperty('content')) {
          obj['content'] = _ApiClient["default"].convertToType(data['content'], 'String');
        }

        if (data.hasOwnProperty('paper_size')) {
          obj['paper_size'] = _ApiClient["default"].convertToType(data['paper_size'], 'String');
        }

        if (data.hasOwnProperty('orientation')) {
          obj['orientation'] = _ApiClient["default"].convertToType(data['orientation'], 'String');
        }

        if (data.hasOwnProperty('output')) {
          obj['output'] = _ApiClient["default"].convertToType(data['output'], 'String');
        }

        if (data.hasOwnProperty('filename')) {
          obj['filename'] = _ApiClient["default"].convertToType(data['filename'], 'String');
        }
      }

      return obj;
    }
    /**
     * Validates the JSON data with respect to <code>ConvertHTML2PDFRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConvertHTML2PDFRequest</code>.
     */

  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
        throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
      } // ensure the json data is a string


      if (data['paper_size'] && !(typeof data['paper_size'] === 'string' || data['paper_size'] instanceof String)) {
        throw new Error("Expected the field `paper_size` to be a primitive type in the JSON string but got " + data['paper_size']);
      } // ensure the json data is a string


      if (data['orientation'] && !(typeof data['orientation'] === 'string' || data['orientation'] instanceof String)) {
        throw new Error("Expected the field `orientation` to be a primitive type in the JSON string but got " + data['orientation']);
      } // ensure the json data is a string


      if (data['output'] && !(typeof data['output'] === 'string' || data['output'] instanceof String)) {
        throw new Error("Expected the field `output` to be a primitive type in the JSON string but got " + data['output']);
      } // ensure the json data is a string


      if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
        throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
      }

      return true;
    }
  }]);

  return ConvertHTML2PDFRequest;
}();
/**
 * HTML content
 * @member {String} content
 */


ConvertHTML2PDFRequest.prototype['content'] = undefined;
/**
 * PDF page size
 * @member {module:model/ConvertHTML2PDFRequest.PaperSizeEnum} paper_size
 * @default 'a4'
 */

ConvertHTML2PDFRequest.prototype['paper_size'] = 'a4';
/**
 * @member {module:model/ConvertHTML2PDFRequest.OrientationEnum} orientation
 * @default 'portrait'
 */

ConvertHTML2PDFRequest.prototype['orientation'] = 'portrait';
/**
 * Output
 * @member {module:model/ConvertHTML2PDFRequest.OutputEnum} output
 * @default 'base64'
 */

ConvertHTML2PDFRequest.prototype['output'] = 'base64';
/**
 * Document name
 * @member {String} filename
 */

ConvertHTML2PDFRequest.prototype['filename'] = undefined;
/**
 * Allowed values for the <code>paper_size</code> property.
 * @enum {String}
 * @readonly
 */

ConvertHTML2PDFRequest['PaperSizeEnum'] = {
  /**
   * value: "a0"
   * @const
   */
  "a0": "a0",

  /**
   * value: "a1"
   * @const
   */
  "a1": "a1",

  /**
   * value: "a2"
   * @const
   */
  "a2": "a2",

  /**
   * value: "a3"
   * @const
   */
  "a3": "a3",

  /**
   * value: "a4"
   * @const
   */
  "a4": "a4",

  /**
   * value: "legal"
   * @const
   */
  "legal": "legal",

  /**
   * value: "tabloid"
   * @const
   */
  "tabloid": "tabloid"
};
/**
 * Allowed values for the <code>orientation</code> property.
 * @enum {String}
 * @readonly
 */

ConvertHTML2PDFRequest['OrientationEnum'] = {
  /**
   * value: "portrait"
   * @const
   */
  "portrait": "portrait",

  /**
   * value: "landscape"
   * @const
   */
  "landscape": "landscape"
};
/**
 * Allowed values for the <code>output</code> property.
 * @enum {String}
 * @readonly
 */

ConvertHTML2PDFRequest['OutputEnum'] = {
  /**
   * value: "base64"
   * @const
   */
  "base64": "base64",

  /**
   * value: "file"
   * @const
   */
  "file": "file"
};
var _default = ConvertHTML2PDFRequest;
exports["default"] = _default;