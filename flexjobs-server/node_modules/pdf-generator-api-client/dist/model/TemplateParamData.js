"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The TemplateParamData model module.
 * @module model/TemplateParamData
 * @version 4.0.3
 */
var TemplateParamData = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TemplateParamData</code>.
   * @alias module:model/TemplateParamData
   * @param {(module:model/Object|module:model/[Object])} instance The actual instance to initialize TemplateParamData.
   */
  function TemplateParamData() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, TemplateParamData);

    _defineProperty(this, "toJSON", function () {
      return this.getActualInstance();
    });

    if (instance === null) {
      this.actualInstance = null;
      return;
    }

    var match = 0;
    var errorMessages = []; // JSON data used to replace data fields in the template

    try {
      this.actualInstance = instance;
      match++;
    } catch (err) {
      // json data failed to deserialize into Object
      errorMessages.push("Failed to construct Object: " + err);
    } // JSON data used to replace data fields in the template


    try {
      // validate array data type
      if (!Array.isArray(instance)) {
        throw new Error("Invalid data type. Expecting array. Input: " + instance);
      }

      this.actualInstance = instance;
      match++;
    } catch (err) {
      // json data failed to deserialize into [Object]
      errorMessages.push("Failed to construct [Object]: " + err);
    }

    if (match > 1) {
      throw new Error("Multiple matches found constructing `TemplateParamData` with oneOf schemas Object, [Object]. Input: " + JSON.stringify(instance));
    } else if (match === 0) {
      this.actualInstance = null; // clear the actual instance in case there are multiple matches

      throw new Error("No match found constructing `TemplateParamData` with oneOf schemas Object, [Object]. Details: " + errorMessages.join(", "));
    } else {// only 1 match
      // the input is valid
    }
  }
  /**
   * Constructs a <code>TemplateParamData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TemplateParamData} obj Optional instance to populate.
   * @return {module:model/TemplateParamData} The populated <code>TemplateParamData</code> instance.
   */


  _createClass(TemplateParamData, [{
    key: "getActualInstance",
    value:
    /**
     * Gets the actual instance, which can be <code>Object</code>, <code>[Object]</code>.
     * @return {(module:model/Object|module:model/[Object])} The actual instance.
     */
    function getActualInstance() {
      return this.actualInstance;
    }
    /**
     * Sets the actual instance, which can be <code>Object</code>, <code>[Object]</code>.
     * @param {(module:model/Object|module:model/[Object])} obj The actual instance.
     */

  }, {
    key: "setActualInstance",
    value: function setActualInstance(obj) {
      this.actualInstance = TemplateParamData.constructFromObject(obj).getActualInstance();
    }
    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */

  }], [{
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      return new TemplateParamData(data);
    }
  }]);

  return TemplateParamData;
}();

_defineProperty(TemplateParamData, "fromJSON", function (json_string) {
  return TemplateParamData.constructFromObject(JSON.parse(json_string));
});

TemplateParamData.OneOf = ["Object", "[Object]"];
var _default = TemplateParamData;
exports["default"] = _default;