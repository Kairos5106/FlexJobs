// inbox.jsx file b4 modiication

import React, { useState } from 'react';
// import './style-inbox.css';
import Chat from './Chat';
import DirectChat from './DirectChat';

const Inbox = () => {

    // const [showDirectChat, setShowDirectChat] = useState(false);

    return (
        <div>
            <Chat />
            {/* Toggle DirectChat for demonstration
            <button onClick={() => setShowDirectChat(!showDirectChat)}>
                {showDirectChat ? 'Hide Direct Chat' : 'Show Direct Chat'}
            </button>
            {showDirectChat && <DirectChat />} */}
        </div>
    );
    // const [rows, setRows] = useState([
    //     { id: 1, name: 'Mr Ahmad', message: 'Hey there! I am...', timestamp: '10:34am', image: './images-inbox/msg1.png' },
    //     { id: 2, name: 'Martha', message: 'I will need someone...', timestamp: '3:31pm', image: './images-inbox/msg2.png' },
    //     { id: 3, name: 'Web Dev group', message: 'Does anyone here knows how...', timestamp: '11:52am', image: './images-inbox/msg3.png' },
    //     { id: 4, name: 'Photo shoot group', message: 'Anyone free to...', timestamp: '2:10pm', image: './images-inbox/msg4.png' },
    //     { id: 5, name: 'Lee Cheng', message: 'Hi, I will be assigning...', timestamp: '5:48pm', image: './images-inbox/msg5.png' }
    // ]);

    // const [selectedRowIndex, setSelectedRowIndex] = useState(null);
    // const [messageInput, setMessageInput] = useState('');

    // const handleRowSelect = (index) => {
    //     setSelectedRowIndex(index);
    // };

    // const handleMessageInputChange = (event) => {
    //     setMessageInput(event.target.value);
    // };

    // const selectedRow = selectedRowIndex !== null ? rows[selectedRowIndex] : null;

    // return (
    //     <div className="container-inbox">
    //         <div className="column-inbox">
    //             <h1 className="h1-inbox">Chats</h1>
    //             <div className="row-inbox">
    //                 <table className="table-inbox" id="inbox-table">
    //                     <tbody>
    //                         {rows.map((row, index) => (
    //                             <tr
    //                                 key={row.id}
    //                                 className={selectedRowIndex === index ? 'selected-inbox' : ''}
    //                                 onClick={() => handleRowSelect(index)}
    //                                 data-image={row.image}
    //                             >
    //                                 <td>
    //                                     <p className="name">{row.name}</p>
    //                                     <p className="message">{row.message}</p>
    //                                 </td>
    //                                 <td className="timestamp">{row.timestamp}</td>
    //                             </tr>
    //                         ))}
    //                     </tbody>
    //                 </table>
    //             </div>
    //         </div>

    //         <div className="line"></div>

    //         <div className="column-message">
    //             <div className="default-display" id="default-display" style={{ display: selectedRow ? 'none' : 'block' }}>
    //                 <img className="message-vector" src="./images-inbox/message-vector.png" alt="Message vector" />
    //                 <p className="start-conversation">Start a conversation with employers or other users</p>
    //             </div>
    //             <div>
    //                 {selectedRow && <img id="image-container" src={selectedRow.image} alt="Message container" />}
    //             </div>

    //             <div className="message-box" id="message-box" style={{ display: selectedRow ? 'flex' : 'none' }}>
    //                 <textarea
    //                     className="message-input"
    //                     id="message-input"
    //                     placeholder="Type your message"
    //                     value={messageInput}
    //                     onChange={handleMessageInputChange}
    //                 ></textarea>
    //                 <img
    //                     className="send-vector"
    //                     id="send-vector"
    //                     src="./images-inbox/send-vector.png"
    //                     alt="Send"
    //                     style={{ display: messageInput.trim() ? 'inline-block' : 'none' }}
    //                 />
    //             </div>
    //         </div>
    //     </div>
    // );
};

export default Inbox;




// chat before changes
import React, { useState } from 'react';
import { ChatEngine } from 'react-chat-engine';
import './style-chat.css';
import ChatFeed from './component/ChatFeed';
// import LoginForm from'./LoginForm';
// import DefaultChat from './DefaultChat';
// import { UserContext } from '../../context/userContext';

const Chat = () => {
    // if(!localStorage.getItem('username')) return <LoginForm />
    // if(!localStorage.getItem('username')) return <DefaultChat />
    // const { user } = UserContext(UserContext); 

    return (
        <ChatEngine
            height="100vh"
            projectID="1b440d10-9c1b-431e-8bfc-e026350e8c6e"
            // userName={localStorage.getItem('username')}
            // userSecret={localStorage.getItem('password')}
            userName='john_doe'
            userSecret='123456'
            renderChatFeed={(chatAppProps) => <ChatFeed { ... chatAppProps} />}
        />
    );
};

export default Chat;



// Chat with Read receipts 

import React, { useState, useEffect, useRef } from "react";
import MessageForm from "./MessageForm";
import MyMessage from "./MyMessage";
import TheirMessage from "./TheirMessage";

const ChatFeed = (props) => {
    const { chats, activeChat, userName, messages, setActiveChat, createChat } = props;
    const [newChatTitle, setNewChatTitle] = useState("");
    const [messageIds, setMessageIds] = useState([]);
    const [localMessages, setLocalMessages] = useState({});

    const chatFeedRef = useRef(null);

    useEffect(() => {
        if (chats && !activeChat) {
            const firstChatId = Object.keys(chats)[0];
            setActiveChat(firstChatId);
        }
    }, [chats, activeChat, setActiveChat]);

    useEffect(() => {
        setLocalMessages(messages);
        setMessageIds(Object.keys(messages));
        scrollToBottom();
    }, [messages]);

    const scrollToBottom = () => {
        if (chatFeedRef.current) {
            chatFeedRef.current.scrollTop = chatFeedRef.current.scrollHeight;
        }
    };

    const chat = chats && chats[activeChat];

    const renderReadReceipts = (message, isMyMessage) => {
        return chat.people.map((person, index) => {
            if (person.last_read === message.id) {
                const avatar = person?.person?.avatar;
                const initials = person.person.username.charAt(0).toUpperCase(); // Assuming the username is available
                return (
                    <div
                        key={`read_${index}`}
                        className="read-receipt"
                        style={{
                            float: isMyMessage ? 'right' : 'left',
                            backgroundImage: avatar ? `url(${avatar})` : 'none',
                            backgroundSize: 'cover', // Ensure the image covers the div
                            backgroundPosition: 'center', // Center the image in the div
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            color: 'white',
                            fontWeight: 'bold',
                            fontSize: '12px',
                            backgroundColor: 'gray', // Background color for initials
                            width: '24px', // Adjust size as needed
                            height: '24px', // Adjust size as needed
                            borderRadius: '50%' // Make it a circle
                        }}
                    >
                        {!avatar && initials}
                    </div>
                );
            }
            return null;
        });
    };
    

    const renderMessages = () => {
        return messageIds.map((messageId, index) => {
            const message = localMessages[messageId];
            const lastMessage = index === 0 ? null : localMessages[messageIds[index - 1]];
            const isMyMessage = message.sender.username === userName;

            return (
                <div key={messageId} style={{ width: '100%' }}>
                    <div className="message-block">
                        {isMyMessage
                            ? <MyMessage message={message} />
                            : <TheirMessage message={message} lastMessage={lastMessage} />}
                    </div>
                    {!isMyMessage && (
                        <div className="read-receipts" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>
                            {renderReadReceipts(message, isMyMessage)}
                        </div>
                    )}
                </div>
            );
        });
    };

    const handleCreateChat = () => {
        if (newChatTitle.trim()) {
            createChat(newChatTitle);
            setNewChatTitle("");
        }
    };

    const handleSendMessage = (message) => {
        setLocalMessages((prevMessages) => ({
            ...prevMessages,
            [message.id]: message
        }));
        setMessageIds((prevIds) => [...prevIds, message.id]);
        scrollToBottom();
    };

    return (
        <div className="chat-feed-container">
            {chats && Object.keys(chats).length > 0 ? (
                chat ? (
                    <>
                        <div className="chat-title-container">
                            <div className="chat-title">{chat.title}</div>
                            <div className="chat-subtitle">
                                {chat.people.map((person) => person.person.username).join(', ')}
                            </div>
                        </div>
                        <div className="chat-feed" ref={chatFeedRef}>
                            {renderMessages()}
                            <div style={{ height: '100px' }} />
                            <div className="message-form-container">
                                <MessageForm {...props} chatId={activeChat} onSendMessage={handleSendMessage} />
                            </div>
                        </div>
                    </>
                ) : (
                    <div className="default-message">
                        <p>Please select a chat to start messaging.</p>
                    </div>
                )
            ) : (
                <div className="default-message">
                    <p>Loading...</p>
                </div>
            )}
        </div>
    );
};

export default ChatFeed;
